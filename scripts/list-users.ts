/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–æ–ª–µ–π
 * –ó–∞–ø—É—Å–∫: npx tsx scripts/list-users.ts
 */

import { db } from "~/server/db";
import { users } from "~/server/db/schema";

async function listUsers() {
  try {
    console.log("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n");

    const allUsers = await db
      .select({
        id: users.id,
        name: users.name,
        email: users.email,
        role: users.role,
        emailVerified: users.emailVerified,
      })
      .from(users);

    if (allUsers.length === 0) {
      console.log("‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.table(
      allUsers.map((user) => ({
        ID: user.id.slice(0, 8) + "...",
        –ò–º—è: user.name ?? "‚Äî",
        Email: user.email,
        –†–æ–ª—å: user.role,
        "Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω": user.emailVerified ? "‚úÖ" : "‚ùå",
      })),
    );

    const adminCount = allUsers.filter((user) => user.role === "admin").length;
    const userCount = allUsers.filter((user) => user.role === "user").length;

    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount}`);
    console.log(`   –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
  } finally {
    process.exit(0);
  }
}

void listUsers();
